/**
 * Configura√ß√µes do Sistema de Atualiza√ß√£o
 * Este arquivo centraliza todas as configura√ß√µes relacionadas ao sistema de atualiza√ß√£o
 */

const UPDATE_CONFIG = {
    // Configura√ß√µes do servidor de atualiza√ß√£o
    server: {
        // URL base para verifica√ß√£o de atualiza√ß√µes (GitHub Releases)
        baseUrl: 'https://api.github.com/repos/L34NDR0-DEV/UBY--Sistemas/releases',
        
        // Timeout para requisi√ß√µes (em milissegundos)
        timeout: 30000,
        
        // Intervalo para verifica√ß√£o autom√°tica (em milissegundos)
        // 24 horas = 24 * 60 * 60 * 1000
        autoCheckInterval: 24 * 60 * 60 * 1000,
        
        // Habilitar verifica√ß√£o autom√°tica na inicializa√ß√£o
        autoCheckOnStartup: true
    },
    
    // Configura√ß√µes da interface do usu√°rio
    ui: {
        // Mostrar notifica√ß√µes de toast
        showToastNotifications: true,
        
        // Dura√ß√£o das notifica√ß√µes (em milissegundos)
        toastDuration: 5000,
        
        // Posi√ß√£o do bot√£o de atualiza√ß√£o no header
        buttonPosition: 'right',
        
        // Texto do bot√£o de atualiza√ß√£o
        buttonText: 'Verificar Atualiza√ß√µes',
        
        // √çcone do bot√£o de atualiza√ß√£o
        buttonIcon: 'üîÑ'
    },
    
    // Configura√ß√µes de download
    download: {
        // Diret√≥rio tempor√°rio para downloads
        tempDir: 'temp-updates',
        
        // Tamanho do buffer para download (em bytes)
        bufferSize: 1024 * 1024, // 1MB
        
        // N√∫mero m√°ximo de tentativas de download
        maxRetries: 3,
        
        // Intervalo entre tentativas (em milissegundos)
        retryInterval: 5000
    },
    
    // Configura√ß√µes de instala√ß√£o
    installation: {
        // Reiniciar automaticamente ap√≥s instala√ß√£o
        autoRestart: true,
        
        // Tempo de espera antes do rein√≠cio (em milissegundos)
        restartDelay: 3000,
        
        // Fazer backup da vers√£o atual antes da instala√ß√£o
        createBackup: true,
        
        // Diret√≥rio para backups
        backupDir: 'backups'
    },
    
    // Configura√ß√µes de logging
    logging: {
        // N√≠vel de log (debug, info, warn, error)
        level: 'info',
        
        // Salvar logs em arquivo
        saveToFile: true,
        
        // Arquivo de log
        logFile: 'update.log',
        
        // Tamanho m√°ximo do arquivo de log (em bytes)
        maxLogSize: 10 * 1024 * 1024 // 10MB
    },
    
    // Configura√ß√µes de seguran√ßa
    security: {
        // Verificar assinatura digital dos arquivos
        verifySignature: true,
        
        // Verificar hash dos arquivos baixados
        verifyHash: true,
        
        // Permitir apenas atualiza√ß√µes de vers√µes superiores
        allowDowngrade: false
    },
    
    // Mensagens personalizadas
    messages: {
        checkingForUpdates: 'Verificando atualiza√ß√µes...',
        updateAvailable: 'Nova atualiza√ß√£o dispon√≠vel!',
        noUpdatesAvailable: 'Voc√™ j√° est√° usando a vers√£o mais recente.',
        downloadingUpdate: 'Baixando atualiza√ß√£o...',
        installingUpdate: 'Instalando atualiza√ß√£o...',
        updateComplete: 'Atualiza√ß√£o conclu√≠da com sucesso!',
        updateError: 'Erro durante a atualiza√ß√£o.',
        restartRequired: 'Reinicializa√ß√£o necess√°ria para aplicar a atualiza√ß√£o.'
    },
    
    // Configura√ß√µes de desenvolvimento
    development: {
        // Simular atualiza√ß√µes em modo de desenvolvimento
        simulateUpdates: false,
        
        // Vers√£o simulada para testes
        mockVersion: '1.1.0',
        
        // Delay simulado para opera√ß√µes (em milissegundos)
        mockDelay: 2000,
        
        // Habilitar logs detalhados
        verboseLogging: true
    }
};

// Fun√ß√£o para obter configura√ß√£o espec√≠fica
function getConfig(path) {
    const keys = path.split('.');
    let value = UPDATE_CONFIG;
    
    for (const key of keys) {
        if (value && typeof value === 'object' && key in value) {
            value = value[key];
        } else {
            return undefined;
        }
    }
    
    return value;
}

// Fun√ß√£o para definir configura√ß√£o espec√≠fica
function setConfig(path, newValue) {
    const keys = path.split('.');
    const lastKey = keys.pop();
    let target = UPDATE_CONFIG;
    
    for (const key of keys) {
        if (!(key in target) || typeof target[key] !== 'object') {
            target[key] = {};
        }
        target = target[key];
    }
    
    target[lastKey] = newValue;
}

// Fun√ß√£o para validar configura√ß√µes
function validateConfig() {
    const errors = [];
    
    // Validar URL do servidor
    if (!UPDATE_CONFIG.server.baseUrl) {
        errors.push('URL do servidor de atualiza√ß√£o n√£o configurada');
    }
    
    // Validar timeout
    if (UPDATE_CONFIG.server.timeout < 1000) {
        errors.push('Timeout muito baixo (m√≠nimo: 1000ms)');
    }
    
    // Validar intervalo de verifica√ß√£o autom√°tica
    if (UPDATE_CONFIG.server.autoCheckInterval < 60000) {
        errors.push('Intervalo de verifica√ß√£o autom√°tica muito baixo (m√≠nimo: 1 minuto)');
    }
    
    return errors;
}

// Exportar configura√ß√µes e fun√ß√µes utilit√°rias
if (typeof module !== 'undefined' && module.exports) {
    // Node.js environment
    module.exports = {
        UPDATE_CONFIG,
        getConfig,
        setConfig,
        validateConfig
    };
} else {
    // Browser environment
    window.UpdateConfig = {
        UPDATE_CONFIG,
        getConfig,
        setConfig,
        validateConfig
    };
}